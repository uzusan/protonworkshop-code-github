AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a load balancer.
Mappings:
  TaskSize:
    x-small:
      Cpu: 256
      Memory: 512
    small:
      Cpu: 512
      Memory: 1024
    medium:
      Cpu: 1024
      Memory: 2048
    large:
      Cpu: 2048
      Memory: 4096
    x-large:
      Cpu: 4096
      Memory: 8192
Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'front-end/front-end-beta'

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'front-end_front-end-beta'
      Cpu: !FindInMap [TaskSize, 'medium', Cpu]
      Memory: !FindInMap [TaskSize, 'medium', Memory]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: 'arn:aws:iam::062821034901:role/AWSProton-env-multi-svc-beta-ECSTaskExecutionRole-1L5XI7X60JZOX'
      TaskRoleArn: !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: 'front-end-beta'
          Cpu: !FindInMap [TaskSize, 'medium', Cpu]
          Memory: !FindInMap [TaskSize, 'medium', Memory]
          Image: ''
          Environment:
          
          
          
            - Name: 'CRYSTAL_URL'
              Value: 'http://crystal.protonworkshop.hosted.local:3000/crystal'
          
          
            - Name: 'NODEJS_URL'
              Value: 'http://nodejs.protonworkshop.hosted.local:3000'
          
          PortMappings:
            - ContainerPort: '3000'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-create-group: 'True'
              awslogs-group: 'front-end/front-end-beta'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'fargate/service/front-end'

  # The service_instance.inputs. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: 'front-end_front-end-beta'
      Cluster: 'AWSProton-env-multi-svc-beta-cloudformation-yaml-GeSrjbARWBAtIwn-ECSCluster-lSiZa9HvUKrS'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: '1'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - 'sg-0a22b31ab4b3a28c4'
          Subnets:
            - 'subnet-058223d99216771bf'
            - 'subnet-0cfcaa83947593c8c'
            - 'subnet-0a3b6a7b5707dff72'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: 'front-end-beta'
          ContainerPort: '3000'
          TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      # Note that the Name property has a 32 character limit, which could be
      # reached by using either front-end, front-end-beta
      # or a combination of both as we're doing here, so we truncate the name to 29 characters
      # plus an ellipsis different from '...' or '---' to avoid running into errors.
      Name: 'front-end--front-end-beta'
      Port: '3000'
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: 'vpc-00e296dd9adeaf4d6'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '5'
        - Key: slow_start.duration_seconds
          Value: '60'
  
  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  EcsSecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Ingress from the ALB
      GroupId: 'sg-0a22b31ab4b3a28c4'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'

  # Load balancer, hosted in public subnets that is accessible
  # to the public or internally depending on the scope. It is 
  # intended to route traffic to one or more public/private
  # facing services.
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: 'vpc-00e296dd9adeaf4d6'
      SecurityGroupIngress:
          
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
          

  
  
  
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - 'subnet-058223d99216771bf'
        - 'subnet-0cfcaa83947593c8c'
        - 'subnet-0a3b6a7b5707dff72'
      SecurityGroups: [!Ref 'LoadBalancerSG']

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: '80'
      Protocol: HTTP
    
  RecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - LoadBalancer
    Properties:
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName
      HostedZoneId: 'Z08408673PQ0VHZUA1UZV'
      Name: 'front-end.protonworkshop.beta.local'
      Type: A

Outputs:
  ServiceEndpoint:
    Description: The URL to access the service
    Value: !Sub "http://${LoadBalancer.DNSName}"